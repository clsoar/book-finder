{"version":3,"sources":["Book.js","App.js","serviceWorker.js","index.js"],"names":["Book","availableThumbnail","this","props","book","imageLinks","thumbnail","react_default","a","createElement","className","style","backgroundImage","concat","alt","title","authors","join","publisher","href","infoLink","target","rel","Component","App","state","query","searchResults","error","bookSearch","fetch","method","then","response","ok","json","Error","items","_this","setState","catch","handleInput","trimmedQuery","replace","submitKey","event","key","handleClick","_this2","type","aria-label","placeholder","value","onChange","onKeyPress","onClick","map","id","src_Book","volumeInfo","message","console","log","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da49fe77.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass Book extends Component {\r\n  render() {\r\n    let availableThumbnail = this.props.book.imageLinks ?\r\n    this.props.book.imageLinks.thumbnail : '';\r\n    return (\r\n      <div className=\"book\">\r\n        <div\r\n          className=\"book-image\"\r\n          style={{backgroundImage: `url(\"${availableThumbnail}\")`}}\r\n          alt=\"Book Cover\">\r\n        </div>\r\n        <div className=\"book-info\">\r\n          <div className=\"book-title\">{this.props.book.title}</div>\r\n          <div className=\"book-author\"><b>By:</b> {(this.props.book.authors) ? this.props.book.authors.join(\", \") : \"Anon\"}</div>\r\n          <div className=\"book-publishing-co\"><b>Publisher:</b> {(this.props.book.publisher) ? this.props.book.publisher : \"None Listed\" }</div>\r\n        </div>\r\n        <div className=\"more-book-info\">\r\n          <a\r\n            className=\"book-info-link\"\r\n            href={this.props.book.infoLink}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\">\r\n            More Info\r\n          </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Book\r\n","import React from 'react';\nimport './App.css';\nimport Book from './Book';\n\nclass App extends React.Component {\n\n  state = {\n    query: '',\n    searchResults: null,\n    error: null\n  }\n\n  bookSearch = (query) => {\n      const url = \"https://www.googleapis.com/books/v1/volumes?q=\" + query;\n    (query !== \"\") ?\n      fetch(url, {method:\"GET\"})\n        .then(response => {\n          if(response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something is wrong, try refreshing the page');\n          }\n        })\n        .then(json => {\n          let searchResults = json.items;\n          this.setState({ searchResults : searchResults })\n        })\n        .catch(error => this.setState({ error }))\n      :\n      this.setState({ searchResults : null })\n\n    }\n\n\n\n\nhandleInput = (query) => {\n  let trimmedQuery = query.replace(/^\\s+/,'');\n  this.setState({ query: query }, this.bookSearch(trimmedQuery));\n\n}\n\n\nsubmitKey = (event) => {\n  if(event.key === \"Enter\"){\n    this.bookSearch(this.state.query);\n  }\n}\n\nhandleClick = (event) => {\n  this.bookSearch(this.state.query);\n}\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Your Search for Books Begins Here</h1>\n          <div className=\"search-box-wrapper\">\n            <input\n              className=\"book-search-input\"\n              type=\"text\"\n              aria-label=\"search input\"\n              placeholder=\"Enter search criteria here\"\n              value={this.state.query}\n              onChange={(event) => this.handleInput(event.target.value)}\n              onKeyPress={this.submitKey}\n            />\n            <button\n              className=\"submit-button\"\n              type=\"button\"\n              onClick={this.handleClick}\n            >\n            Search\n            </button>\n          </div>\n\n        </header>\n        <main className=\"book-results-section\">\n          <div className=\"books-search-results\">\n            <ol className=\"books-list\">\n            {\n              (this.state.searchResults) ?\n              this.state.searchResults.map((searchResults) => {\n\n                return (\n                  <li key={searchResults.id}>\n                    <Book\n                      book={ searchResults.volumeInfo }\n                    />\n                  </li>\n                )\n              }) : (this.state.error) ?\n                <div className=\"error-message-wrapper\">\n                  <p className=\"error-notification\">Oh No! Something went oh so dreadfully wrong. Try refreshing the page and starting over. If that doesn't work, contact the site administrator.</p>\n                  <p className=\"error-message\">Error Information: {this.state.error.message}{console.log(this.state.error)}</p>\n                </div>\n              : <p className=\"start-search-prompt\">Begin your search above.</p>\n\n            }\n            </ol>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}